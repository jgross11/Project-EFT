using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;

namespace Project_EFT.Ciphers.Options
{
    /// <summary>
    /// Represents an HTML element to be rendered on a <see cref="Cipher"/>'s page as a setting for that cipher, 
    /// including an error displaying div.
    /// </summary>
    public abstract class Option
    {
        /// <summary> The HTML id of the element(s) generated by this option. </summary>
        public string FieldName { get; set; }

        /// <summary> The HTML text to display near this option. </summary>
        public string DisplayName { get; set; }

        /// <summary> The error message to display in this option's error div, should an error occur. </summary>
        public string ErrorMessage { get; set; }

        /// <summary> Creates an option with no error message. </summary>
        /// <param name="fieldName"> The HTML id to generate for this option's element(s).</param>
        /// <param name="displayName"> The HTML text to display for this option. </param>
        public Option(string fieldName, string displayName) 
        {
            FieldName = fieldName;
            DisplayName = displayName;
            ErrorMessage = null;
        }

        /// <summary> Creates an option with an error message.</summary>
        /// <param name="fieldName"> The HTML id to generate for this option's element(s).</param>
        /// <param name="displayName"> The HTML text to display for this option. </param>
        /// <param name="errorMessage"> The error message to display for this option. </param>
        public Option(string fieldName, string displayName, string errorMessage)
        {
            FieldName = fieldName;
            DisplayName = displayName;
            ErrorMessage = errorMessage;
        }

        /// <summary>Generates the HTML code that will render this option. </summary>
        /// <returns>An HTML snippet that will render this option when interpreted as HTML code.</returns>
        public abstract string GetHTML();

        /// <summary>Generates the HTML code that will render this option's error message.</summary>
        /// <returns>An HTML snippet that will render this option when interpreted as HTML code.</returns>
        public virtual string GetErrorHTML()
        {
            return String.Format("<div class = 'error' id='{0}-error'>{1}</div>", FieldName, ErrorMessage);
        }

        // https://bit.ly/3u2ymVn
        // lines 63 and 64
        /// <summary>Sets the specific form option's value according to its type. </summary>
        /// <param name="newVal">The value of this option, almost always obtained from this option's <see cref="Cipher"/> form representation.</param>
        public abstract void SetValue(string newVal);

        /// <summary>Get the value of this option.</summary>
        /// <returns>The value of this option, whose type will be the specific type of a subclass. 
        /// In almost all cases, see <see cref="Option{T}"/> for more details.</returns>
        public abstract object GetValue();

        /// <summary>Sets this option's value based on the value corresponding to this option's <see cref="FieldName"/> in the given form.</summary>
        /// <param name="form">The HTML form object - which may or may not contain information for this option - to attempt to pull a value from.</param>
        public virtual void ObtainValueFromForm(IFormCollection form)
        {
            if (FieldName != null)
            {
                SetValue(form[FieldName].ToString());
            }
        }
    }

    /// <summary> An <see cref="Option"/> for an HTML input element, which will contain a value of type <typeparamref name="T"/></summary>
    /// <typeparam name="T">The type of value this input element interacts with.</typeparam>
    public abstract class Option<T> : Option
    {
        /// <summary>The value this option contains or obtains on the cipher options form.</summary>
        public T Value;

        /// <summary>Creates an input option with no error message which contains the given value.</summary>
        /// <param name="fieldName"> The HTML id to generate for this option's element(s).</param>
        /// <param name="displayName"> The HTML text to display for this option. </param>
        /// <param name="value"> The value held by this option. </param>
        public Option(string fieldName, string displayName, T value) : base(fieldName, displayName)
        {
            Value = value;
        }

        /// <summary>Creates an input option with an error message which contains the given value.</summary>
        /// <param name="fieldName"> The HTML id to generate for this option's element(s).</param>
        /// <param name="displayName"> The HTML text to display for this option. </param>
        /// <param name="errorMessage"> The error message to display for this option. </param>
        /// <param name="value"> The value held by this option. </param>
        public Option(string fieldName, string displayName, string errorMessage, T value) : base(fieldName, displayName, errorMessage)
        {
            Value = value;
        }

        /// <summary>Get the input value this option contains.</summary>
        /// <returns>The input value of this option, which will need to be cast to type <typeparamref name="T"/>.</returns>
        public override object GetValue()
        {
            return Value;
        }

        /// <summary>Attempts to set the value of this option to the <typeparamref name="T"/> represented by the parameter.</summary>
        /// <param name="newVal">The value of type <typeparamref name="T"/> to set for this input option, represented as a string. 
        /// Cast as string, then int, then the default value for <typeparamref name="T"/>.</param>
        public override void SetValue(string newVal)
        {
            // https://bit.ly/3u2ymVn
            // lines 63 and 64

            // string
            try
            {
                Value = (T)((object)newVal);
            }
            catch 
            {
                // int
                try
                {
                    Value = (T)(object)int.Parse(newVal);
                }
                catch 
                {
                    // otherwise, set to default value for this type
                    Value = default;
                }
            }
        }
    }
}